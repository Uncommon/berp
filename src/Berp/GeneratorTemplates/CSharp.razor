@using Berp;
@helper CallProduction(ProductionRule production)
{
	switch(production.Type)
	{
		case ProductionRuleType.Start:
				@:context.Builder.Push(RuleType.@production.RuleName);
			break;
		case ProductionRuleType.End:
				@:context.Builder.Pop(RuleType.@production.RuleName);
			break;
		case ProductionRuleType.Process:
				@:context.Builder.Build(token);
			break;
	}
}
@helper HandleParserError(IEnumerable<string> expectedTokens, State state)
{
	@:var error = new ParserError(token, new string[] {"@Raw(string.Join("\", \"", expectedTokens))"}, "State: @state.Id - @Raw(state.Comment)");
	@:if (StopAtFirstError)
		@:throw new ParserException(error);

	@:context.Errors.Add(error);
	@:return @state.Id;
}
using System;
using System.Collections.Generic;
namespace @Model.Namespace
{
	public enum TokenType
	{
		None,
		@foreach(var rule in Model.RuleSet.TokenRules)
		{
			@rule.Name.Replace("#", "")@:,
		}
	}

	public enum RuleType
	{
		None,
		@foreach(var rule in Model.RuleSet.Where(r => !r.TempRule))
		{
			@rule.Name.Replace("#", "_")@:, // @rule.ToString(true)
		}
	}

    public partial class ParserError
    {
        public string StateComment { get; private set; }

        public Token ReceivedToken { get; private set; }
        public string[] ExpectedTokenTypes { get; private set; }

        public ParserError(Token receivedToken, string[] expectedTokenTypes, string stateComment)
        {
            this.ReceivedToken = receivedToken;
            this.ExpectedTokenTypes = expectedTokenTypes;
            this.StateComment = stateComment;
        }

        public override string ToString()
        {
            return ParserMessageProvider.GetParserErrorMessage(this);
        }
    }

    public partial class ParserException : Exception
    {
        private ParserError[] errors = new ParserError[0];

        public ParserError[] Errors { get { return errors; } }

        public ParserException() { }
        public ParserException(string message) : base(message) { }
        public ParserException(string message, Exception inner) : base(message, inner) { }

        public ParserException(params ParserError[] errors)
            : base(ParserMessageProvider.GetDefaultExceptionMessage(errors))
        {
            if (errors != null)
                this.errors = errors;
        }
    }

    public class @Model.ParserClassName
    {
		public bool StopAtFirstError { get; set;}

		class ParserContext
		{
			public TokenScanner TokenScanner { get; set; }
			public ASTBuilder Builder { get; set; }
			public Queue<Token> TokenQueue { get; set; }
			public List<ParserError> Errors { get; set; }
		}

        public object Parse(TokenScanner tokenScanner)
		{
			var context = new ParserContext
			{
				TokenScanner = tokenScanner,
				Builder = new ASTBuilder(),
				TokenQueue = new Queue<Token>(),
				Errors = new List<ParserError>()
			};

			context.Builder.Push(RuleType.@Model.RuleSet.StartRule.Name);
            int state = 0;
            Token token;
            do
			{
				token = ReadToken(context);
				state = MatchToken(state, token, context);
            } while(!token.IsEOF);

			if (context.Errors.Count > 0)
			{
				throw new ParserException(context.Errors.ToArray());
			}

			if (state != @Model.EndState.Id)
			{
				throw new InvalidOperationException("One of the grammar rules expected #EOF explicitly.");
			}

			context.Builder.Pop(RuleType.@Model.RuleSet.StartRule.Name);
			return context.Builder.RootNode;
		}

		Token ReadToken(ParserContext context)
		{
			return context.TokenQueue.Count > 0 ? context.TokenQueue.Dequeue() : context.TokenScanner.Read();
		}

		int MatchToken(int state, Token token, ParserContext context)
		{
			int newState;
			switch(state)
			{
			@foreach(var state in Model.States.Values.Where(s => !s.IsEndState))
			{
				@:case @state.Id:
					@:newState = MatchTokenAt_@(state.Id)(token, context);
					@:break;
			}
				default:
					throw new InvalidOperationException("Unknown state: " + state);
			}
			return newState;
		}

	@foreach(var state in Model.States.Values.Where(s => !s.IsEndState))
	{
		<text>
		// @Raw(state.Comment)
		int MatchTokenAt_@(state.Id)(Token token, ParserContext context)
		{
			@foreach(var transition in state.Transitions)
			{
			@:if (context.TokenScanner.Match_@(transition.TokenType)(token))
			@:{
				if (transition.LookAheadHint != null)
				{
				@:if (LookAhead_@(transition.LookAheadHint.Id)(context, token))
				@:{
				}
				foreach(var production in transition.Productions)
				{
					@CallProduction(production)
				}
				@:return @transition.TargetState;
				if (transition.LookAheadHint != null)
				{
				@:}
				}
			@:}
			}
			@HandleParserError(state.Transitions.Select(t => "#" + t.TokenType.ToString()).Distinct(), state)
		}
		</text>
	}

	@foreach(var lookAheadHint in Model.RuleSet.LookAheadHints)
	{
		<text>
		bool LookAhead_@(lookAheadHint.Id)(ParserContext context, Token currentToken)
		{
			currentToken.Detach();
            Token token;
			var queue = new Queue<Token>();
			bool match = false;
		    do
		    {
		        token = ReadToken(context);
				token.Detach();
		        queue.Enqueue(token);

		        if (false
				@foreach(var tokenType in lookAheadHint.ExpectedTokens)
				{
					@:|| context.TokenScanner.Match_@(tokenType)(token)
				}
				)
		        {
					match = true;
					break;
		        }
		    } while (false
			@foreach(var tokenType in lookAheadHint.Skip)
			{
				@:|| context.TokenScanner.Match_@(tokenType)(token)
			}
			);
			foreach(var t in queue)
				context.TokenQueue.Enqueue(t);
			return match;
		}
		</text>
	}
	}
}