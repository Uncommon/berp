[
	Tokens -> #Rule,#Token,#EOL,#Production,#Definition,#LParen,#RParen,#LBracket,#RBracket,#Arrow,#AlternateOp,#AnyMultiplier,#OneOrMoreMultiplier,#OneOrZeroMultiplier,#Comma,#Number
	ClassName -> Parser
	Namespace -> Berp.BerpGrammar
	TargetNamespace -> Berp
	TargetClassName -> RuleSet
	SimpleTokenMatcher -> true
]


Grammar! := Settings? RuleDefinition+
RuleDefinition! := #Rule #Production? LookAhead? #Definition RuleDefinitionElement+ #EOL
RuleDefinitionElement! := RuleDefinitionElement_Core RuleDefinitionElement_Multiplier?
RuleDefinitionElement_Core := (AlternateElement | TokenElement | RuleElement | GroupElement)
RuleDefinitionElement_Multiplier := (#AnyMultiplier | #OneOrMoreMultiplier | #OneOrZeroMultiplier)
AlternateElement! [#Token|#Rule->#AlternateOp]:= #LParen AlternateElementBody #RParen
AlternateElementBody := AlternateElementItem (#AlternateOp AlternateElementItem)*
AlternateElementItem := (#Rule | #Token)
GroupElement! := #LParen RuleDefinitionElement+ #RParen
TokenElement := #Token
RuleElement := #Rule
LookAhead! := #LBracket LookAheadTokenList1? #Arrow LookAheadTokenList2? #RBracket
LookAheadTokenList1! := #Token (#AlternateOp #Token)*
LookAheadTokenList2! := #Token (#AlternateOp #Token)*

Settings! := (#LBracket #EOL) Parameter* (#RBracket #EOL)
Parameter! := #Rule #Arrow ParameterValue (#Comma ParameterValue)* #EOL
ParameterValue := (#Rule | #Token | #Number)