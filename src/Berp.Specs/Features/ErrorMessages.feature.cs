// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18408
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Berp.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Error Messages", SourceFile="Features\\ErrorMessages.feature", SourceLine=0)]
    public partial class ErrorMessagesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ErrorMessages.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Error Messages", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Expected tokens are listed in the error message", SourceLine=2)]
        public virtual void ExpectedTokensAreListedInTheErrorMessage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Expected tokens are listed in the error message", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 4
 testRunner.Given("the input source", "Grammar dummy\n//possible correct variations:\n// Grammar := ... (token: #Definitio" +
                    "n)\n// Grammar! ... (token: #Production)", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.And("the parser is set to stop at first error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.When("the input source is parsed with the BerpGrammarParserForTest parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.Then("the parsing should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "expected token"});
            table1.AddRow(new string[] {
                        "#Definition"});
            table1.AddRow(new string[] {
                        "#Production"});
#line 14
 testRunner.And("the error should contain the expected tokens", ((string)(null)), table1, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Expected tokens are listed in the error message (distinct)", SourceLine=18)]
        public virtual void ExpectedTokensAreListedInTheErrorMessageDistinct()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Expected tokens are listed in the error message (distinct)", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 20
 testRunner.Given("the input source", "Grammar := ", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.And("the parser is set to stop at first error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.When("the input source is parsed with the BerpGrammarParserForTest parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 26
 testRunner.Then("the parsing should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "expected token"});
            table2.AddRow(new string[] {
                        "#LParen"});
            table2.AddRow(new string[] {
                        "#Token"});
            table2.AddRow(new string[] {
                        "#Rule"});
#line 27
 testRunner.And("the error should contain the expected tokens", ((string)(null)), table2, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Received token is in the error message", SourceLine=32)]
        public virtual void ReceivedTokenIsInTheErrorMessage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Received token is in the error message", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 34
 testRunner.Given("the input source", "Grammar |\n//possible correct variations:\n// Grammar := ... (token: #Definition)\n/" +
                    "/ Grammar! ... (token: #Production)", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
 testRunner.And("the parser is set to stop at first error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.When("the input source is parsed with the BerpGrammarParserForTest parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
 testRunner.Then("the parsing should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
 testRunner.And("the error should contain the received token #AlternateOp", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Should handle unexpected end of file", SourceLine=45)]
        public virtual void ShouldHandleUnexpectedEndOfFile()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should handle unexpected end of file", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 47
 testRunner.Given("the input source", "//there must be at least one grammar rule in the file\n[\n]", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 53
 testRunner.And("the parser is set to stop at first error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.When("the input source is parsed with the BerpGrammarParserForTest parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.Then("the parsing should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 56
 testRunner.And("the error should be an unexpected end of file error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Should include line numbers into the parsing errors", SourceLine=57)]
        public virtual void ShouldIncludeLineNumbersIntoTheParsingErrors()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should include line numbers into the parsing errors", ((string[])(null)));
#line 58
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 59
 testRunner.Given("the input source", "// comment to increase the line number\nGrammar dummy\n//possible correct variation" +
                    "s:\n// Grammar := ... (token: #Definition)\n// Grammar! ... (token: #Production)", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 67
 testRunner.And("the parser is set to stop at first error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.When("the input source is parsed with the BerpGrammarParserForTest parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 69
 testRunner.Then("the parsing should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 70
 testRunner.And("the error should contain the line number 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Should include line position numbers into the parsing errors", SourceLine=71)]
        public virtual void ShouldIncludeLinePositionNumbersIntoTheParsingErrors()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Should include line position numbers into the parsing errors", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 73
 testRunner.Given("the input source", "G dummy\n//possible correct variations:\n// G := ... (token: #Definition)\n// G! ..." +
                    " (token: #Production)", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 80
 testRunner.And("the parser is set to stop at first error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 81
 testRunner.When("the input source is parsed with the BerpGrammarParserForTest parser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
 testRunner.Then("the parsing should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 83
 testRunner.And("the error should contain the line position number 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
